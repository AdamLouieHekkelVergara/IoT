Index: Version2/Node.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import uuid\r\nfrom Version2.Messages import DIO, DAO\r\n\r\n\r\nclass Node:\r\n    # constructor\r\n    def __init__(self, env, rank: int, positionX: float, positionY: float):\r\n        self.ID: uuid = uuid.uuid4()\r\n        self.rank: int = rank  # initial rank\r\n        self.positionX: float = positionX\r\n        self.positionY: float = positionY\r\n\r\n        self.env = env\r\n\r\n    #\r\n    def receive_message(self, message: DIO):\r\n        new_rank = message.get_rank() + 1\r\n        self.rank = new_rank\r\n\r\n    # when called upon\r\n    def receive_message_DAO(self, message: DAO):\r\n        self.isBusy = True\r\n\r\n\r\n\r\n    def get_ID(self) -> uuid:\r\n        return self.ID\r\n\r\n    def get_rank(self) -> int:\r\n        return self.rank\r\n\r\n    def set_rank(self, rank):\r\n        self.rank = rank\r\n\r\n    def get_X(self) -> float:\r\n        return self.positionX\r\n\r\n    def get_Y(self) -> float:\r\n        return self.positionY\r\n\r\n    def set_status(self, is_busy: bool):\r\n        self.isBusy = is_busy\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Version2/Node.py b/Version2/Node.py
--- a/Version2/Node.py	(revision 4345a53cfe9da4578b1555e4b13852adbde4895a)
+++ b/Version2/Node.py	(date 1639070224057)
@@ -2,6 +2,7 @@
 from Version2.Messages import DIO, DAO
 
 
+
 class Node:
     # constructor
     def __init__(self, env, rank: int, positionX: float, positionY: float):
@@ -21,7 +22,11 @@
     def receive_message_DAO(self, message: DAO):
         self.isBusy = True
 
-
+    def send_message(self):
+        new_DIO = DIO(self.rank)
+        yield self.env.timeout(10)  # it takes 0.1 second to create a dio.
+        print(f'message sent out at: {self.env.now}')
+        #Network.send_to_neigbors(self.ID, new_DIO)
 
     def get_ID(self) -> uuid:
         return self.ID
Index: Version2/Network.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Version2.Messages import DIO\r\nfrom Version2.Node import Node\r\nfrom Version2.Connection import Connection\r\nimport numpy as np\r\nimport random\r\nimport math\r\n\r\n\r\nclass Network:\r\n    # constructor\r\n    def __init__(self, env, no_of_nodes: int):\r\n        self.noOfNodes: int = no_of_nodes\r\n        self.env = env\r\n        self.nodes: [] = self.__define_nodes_in_network(no_of_nodes)\r\n        self.neighbourRadius: float = 1.5\r\n        self.connections = self.__initialize_neighbours()\r\n\r\n    def source(self, amountOfMessages, interval):\r\n        \"\"\"Source generates messages randomly\"\"\"\r\n        for i in range(amountOfMessages):\r\n            # make a random node from the network send a random message.\r\n            for node in self.nodes:\r\n                print(f'message {i} was created at time: {self.env.now} for node: {node.ID}')\r\n                node = random.choice(self.nodes)\r\n                self.env.process(self.send_message())\r\n            t = random.expovariate(1.0 / interval)\r\n            yield self.env.timeout(t)\r\n\r\n    def send_message(self):\r\n        #new_DIO = DIO()\r\n        yield self.env.timeout(10)  # it takes 0.1 second to create a dio.\r\n        print(f'message sent out at: {self.env.now}')\r\n        # Network.send_to_neigbors(self.ID, new_DIO)\r\n\r\n        print(f'A message was to neighbors send at time: {self.env.now}')\r\n\r\n\r\n\r\n    # assign each node a random position and rank in the network\r\n    def __define_nodes_in_network(self, no_of_nodes) -> []:\r\n        nodelist = []\r\n        for i in range(no_of_nodes):\r\n            x = round(np.random.uniform(0, 10), 1)\r\n            y = round(i / (no_of_nodes / 10))\r\n            rank = 0\r\n            node = Node(self.env, rank, x, y)\r\n            nodelist.append(node)\r\n        return nodelist\r\n\r\n    # Neighbour finding algorithm\r\n    def __initialize_neighbours(self) -> []:\r\n        connections = []\r\n        nodes = self.nodes\r\n        for i in nodes:\r\n            for j in nodes:\r\n                if i.get_ID() == j.get_ID():\r\n                    continue\r\n                dist = math.sqrt((i.get_X() - j.get_X()) ** 2 + (i.get_Y() - j.get_Y()) ** 2)\r\n                if dist <= self.neighbourRadius:\r\n                    connection = Connection(ETX=1, node_from=i, node_to=j)\r\n                    connections.append(connection)\r\n        return connections\r\n\r\n    def get_nodes(self) -> list:\r\n        return self.nodes\r\n\r\n    def get_nr_of_nodes(self) -> int:\r\n        return self.noOfNodes\r\n\r\n    def get_connections(self) -> list:\r\n        return self.connections\r\n\r\n    def get_env(self):\r\n        return self.env\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Version2/Network.py b/Version2/Network.py
--- a/Version2/Network.py	(revision 4345a53cfe9da4578b1555e4b13852adbde4895a)
+++ b/Version2/Network.py	(date 1639151341226)
@@ -1,3 +1,5 @@
+import uuid
+
 from Version2.Messages import DIO
 from Version2.Node import Node
 from Version2.Connection import Connection
@@ -18,10 +20,10 @@
     def source(self, amountOfMessages, interval):
         """Source generates messages randomly"""
         for i in range(amountOfMessages):
-            # make a random node from the network send a random message.
             for node in self.nodes:
+                # make a random node from the network send a random message.
                 print(f'message {i} was created at time: {self.env.now} for node: {node.ID}')
-                node = random.choice(self.nodes)
+                #node = random.choice(self.nodes)
                 self.env.process(self.send_message())
             t = random.expovariate(1.0 / interval)
             yield self.env.timeout(t)
@@ -34,8 +36,6 @@
 
         print(f'A message was to neighbors send at time: {self.env.now}')
 
-
-
     # assign each node a random position and rank in the network
     def __define_nodes_in_network(self, no_of_nodes) -> []:
         nodelist = []
@@ -61,6 +61,27 @@
                     connections.append(connection)
         return connections
 
+    def __find_nodes_with_rank(self, rank: int):
+        nodes_with_rank = []
+        for i in self.nodes:
+            if i.get_rank() == rank:
+                nodes_with_rank.append(i)
+        return nodes_with_rank
+
+    def __find_neighbours(self, node_id: uuid):
+        all_connections = self.connections
+        neighbours = []
+        for i in all_connections:
+            if i.get_node_from().get_ID() == node_id:
+                neighbours.append(i.nodeTo)
+        return neighbours
+
+    def __find_nodes_with_id(self, node_ID: uuid):
+        for node in self.get_nodes():
+            if node.get_ID() == node_ID:
+                return node
+        return
+
     def get_nodes(self) -> list:
         return self.nodes
 
Index: Version2/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import simpy\r\nfrom Version2.Network import Network\r\n\r\nprint(\"Dodag\")\r\n\r\n\r\ndef main():\r\n    NEW_MESSAGES = 5 # Total number of customers\r\n    INTERVAL_MESSAGES = 10  # Generate new customers roughly every x seconds\r\n    env = simpy.Environment()\r\n\r\n    env = simpy.Environment()\r\n    # initialize network with number of nodes placed on a grid:\r\n    network = Network(env, 110)\r\n    env.process(network.source(NEW_MESSAGES,INTERVAL_MESSAGES))\r\n    env.run()\r\n\r\nmain()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Version2/main.py b/Version2/main.py
--- a/Version2/main.py	(revision 4345a53cfe9da4578b1555e4b13852adbde4895a)
+++ b/Version2/main.py	(date 1639070224091)
@@ -12,7 +12,7 @@
     env = simpy.Environment()
     # initialize network with number of nodes placed on a grid:
     network = Network(env, 110)
-    env.process(network.source(NEW_MESSAGES,INTERVAL_MESSAGES))
+    env.process(network.source(NEW_MESSAGES, INTERVAL_MESSAGES))
     env.run()
 
 main()
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 4345a53cfe9da4578b1555e4b13852adbde4895a)
+++ b/.idea/misc.xml	(date 1639070224091)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (IoT)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: Version2/main2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Version2/main2.py b/Version2/main2.py
new file mode 100644
--- /dev/null	(date 1639070224107)
+++ b/Version2/main2.py	(date 1639070224107)
@@ -0,0 +1,30 @@
+import matplotlib.pyplot as plt
+import simpy
+from Network import Network
+from Node import Node
+
+
+env = simpy.Environment()
+no_of_nodes: int = 110
+network = Network(env, no_of_nodes)
+nodes = network.get_nodes()
+connections = network.get_connections()
+
+node = simpy.Resource(env, capacity=1)
+env.process(Node.source(self=nodes[0], env=env, number=5, interval=10))
+env.run()
+
+
+# PLOT NODES AND CONNECTIONS
+# for i in nodes:
+#     x = i.get_X()
+#     y = i.get_Y()
+#     plt.plot(x, y, 'ro')
+#     plt.annotate(i.get_rank(), (x, y))
+# for i in connections:
+#     from_x = i.get_node_from().get_X()
+#     from_y = i.get_node_from().get_Y()
+#     to_x = i.get_node_to().get_X()
+#     to_y = i.get_node_to().get_Y()
+#     plt.plot([from_x, to_x], [from_y, to_y], 'k')
+# plt.show()
Index: .idea/IoT.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Unittests\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/IoT.iml b/.idea/IoT.iml
--- a/.idea/IoT.iml	(revision 4345a53cfe9da4578b1555e4b13852adbde4895a)
+++ b/.idea/IoT.iml	(date 1639070224138)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
diff --git a/Version2/__init__.py b/Version2/__init__.py
deleted file mode 100644
